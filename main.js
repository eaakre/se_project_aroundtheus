!function(){"use strict";class e{constructor(e,t,s,i,r){let{name:n,link:o,_id:a,isLiked:l}=e;this._name=n,this._link=o,this._id=a,this._isLiked=l,this._cardSelector=t,this._handleImageClick=s,this._handleDeleteClick=i,this._handleLikeClick=r}_getCardElement(){return this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".cards__list-item").cloneNode(!0)}_setEventsListeners(){this._cardImage.addEventListener("click",(()=>{this._handleImageClick({name:this._name,url:this._link})})),this._likeButton.addEventListener("click",(()=>{this._handleLikeClick(this)})),this._deleteButton.addEventListener("click",(()=>{this._handleDeleteClick(this)}))}handleDeleteCard=()=>{this._cardElement.remove(),this._cardElement=null};setIsLiked(e){this._isLiked=e,this._renderLikes()}isLiked(){return this._isLiked}_renderLikes(){this._isLiked?this._likeButton.classList.add("cards__favorite_active"):this._likeButton.classList.remove("cards__favorite_active")}getView(){return this._cardElement=this._getCardElement(),this._cardTitle=this._cardElement.querySelector(".cards__title"),this._cardImage=this._cardElement.querySelector(".cards__image"),this._likeButton=this._cardElement.querySelector(".cards__favorite"),this._deleteButton=this._cardElement.querySelector(".cards__delete-button"),this._cardImage.src=this._link,this._cardTitle.textContent=this._name,this._cardImage.alt=this._name,this._setEventsListeners(),this._isLiked&&this._likeButton.classList.add("cards__favorite_active"),this._cardElement}}class t{constructor(e,t){let{data:s,renderer:i}=e;this._items=s,this._renderer=i,this._container=document.querySelector(t)}addItem(e){this._container.prepend(e)}clear(){this._container.innerHTML=""}renderItems(){this.clear(),this._items.reverse().forEach(this._renderer)}}class s{constructor(e){let{popupSelector:t}=e;this._popupElement=document.querySelector(t)}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose=e=>{"Escape"===e.key&&this.close()};setEventListeners(){this._popupElement.addEventListener("click",(e=>{(e.target.classList.contains("modal_opened")||e.target.classList.contains("modal__close"))&&this.close()}))}}class i extends s{constructor(e,t){super({popupSelector:e}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._inputList=this._popupElement.querySelectorAll(".form__input"),this._handleFormSubmit=t,this._popupSubmit=this._popupElement.querySelector(".modal__button")}_getInputValues(){const e={};return this._inputList.forEach((t=>{e[t.name]=t.value})),e}setSubmitText(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";this._popupSubmit.textContent=e?t:"Save"}setEventListeners(){this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())})),super.setEventListeners()}close(){super.close(),this._popupForm.reset()}}class r{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._form=t}_showInputError(e,t){const s=this._form.querySelector(`.${e.id}-error`);e.classList.add(this._inputErrorClass),s.textContent=t,s.classList.add(this._errorClass)}_hideInputError(e){const t=this._form.querySelector(`.${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}_toggleButtonState(){if(this._hasInvalidInput(this._inputList))return this.disableButton();this._enableButton()}disableButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}_enableButton(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}_hasInvalidInput(){return!this._inputList.every((e=>e.validity.valid))}_checkValidity(e){if(!e.validity.valid)return this._showInputError(e,e.validationMessage);this._hideInputError(e)}_setEventListeners(){this._inputList=[...this._form.querySelectorAll(this._inputSelector)],this._submitButton=this._form.querySelector(this._submitButtonSelector),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkValidity(e),this._toggleButtonState()}))}))}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}const n={formSelector:".modal__form",inputSelector:".form__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"form__input_type_error",errorClass:"form__error_visible"},o=document.querySelector("#profile-edit-modal"),a=document.forms["edit-form"],l=document.forms["add-form"],c=document.forms["update-avatar-form"],d=document.querySelector(".profile__edit-button"),u=document.querySelector(".profile__add-button"),h=(document.querySelectorAll(".cards__delete-button"),document.querySelector(".profile__avatar-edit")),_=o.querySelector(".form__input_name"),m=o.querySelector(".form__input_description");let p,v;function b(e){const t=E(e);p.addItem(t)}function f(e,t){B.open(e,t)}function S(e){e.isLiked()?k.removeLikeCard(e._id).then((t=>{e.setIsLiked(t.isLiked)})).catch((e=>{console.error(e)})):k.likeCard(e._id).then((t=>{e.setIsLiked(t.isLiked)})).catch((e=>{console.error(e)}))}const E=t=>new e(t,"#cards__list-item",f,x,S).getView(),L=new class{constructor(e){let{userName:t,userAbout:s,userAvatar:i}=e;this._userName=document.querySelector(t),this._userAbout=document.querySelector(s),this._userAvatar=document.querySelector(i)}getUserInfo(){return{name:this._userName.textContent,about:this._userAbout.textContent}}setUserInfo(e){this._userName.textContent=e.name,this._userAbout.textContent=e.about,this._userAvatar.alt=e.name+" avatar"}setUserAvatar(e,t){this._userAvatar.src=e}}({userName:".profile__title",userAbout:".profile__description",userAvatar:".profile__avatar"}),k=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._authorization=s.authorization,this._contentType=s["Content-Type"],this._headers=s}_checkResponse(e){if(e.ok)return e.json();Promise.reject(`Error: ${e.status}`)}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then(this._checkResponse)}getUser(){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers}).then(this._checkResponse)}updateProfile(e){return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",body:JSON.stringify({name:e.name,about:e.about}),headers:this._headers}).then(this._checkResponse)}addCard(e,t){return fetch(`${this._baseUrl}/cards`,{method:"POST",body:JSON.stringify({name:e,link:t}),headers:this._headers}).then(this._checkResponse)}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}likeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers}).then(this._checkResponse)}removeLikeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}updateProfilePicture(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then(this._checkResponse)}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"a93ebd2f-fd06-499f-b2f9-74e2f8519709","Content-Type":"application/json"}});Promise.all([k.getUser(),k.getInitialCards()]).then((e=>{let[s,i]=e;L.setUserInfo({name:s.name,about:s.about}),L.setUserAvatar(s.avatar,s.name),p=new t({data:i,renderer:b},".cards__list"),p.renderItems()})).catch((e=>console.log(e))),new r(n,a).enableValidation();const C=new r(n,l);C.enableValidation();const y=new r(n,c);y.enableValidation();const g=new i("#profile-edit-modal",(e=>{g.setSubmitText(!0),k.updateProfile(e).then((e=>{L.setUserInfo(e),g.close()})).catch((e=>console.log(e))).finally((()=>g.setSubmitText(!1)))}));g.setEventListeners(),d.addEventListener("click",(()=>{g.open();const e=L.getUserInfo();_.value=e.name,m.value=e.about}));const I=new i("#profile-add-modal",(e=>{let{title:t,image:s}=e;I.setSubmitText(!0),k.addCard(t,s).then((e=>{v=E({name:e.name,link:e.link,_id:e._id,isLiked:!1}),p.addItem(v),I.close()})).catch((e=>console.log(e))).finally((()=>I.setSubmitText(!1)))}));I.setEventListeners(),u.addEventListener("click",(()=>{C.disableButton(),I.open()}));const q=new i("#update-avatar-modal",(e=>{q.setSubmitText(!0),k.updateProfilePicture(e.image).then((e=>{L.setUserAvatar(e.avatar),q.close()})).catch((e=>console.log(e))).finally((()=>q.setSubmitText(!1)))}));q.setEventListeners(),h.addEventListener("click",(()=>{y.disableButton(),q.open()}));const B=new class extends s{constructor(e){super({popupSelector:e}),this._cardImage=document.querySelector(".modal__image"),this._cardTitle=document.querySelector(".modal__title")}open(e){this._cardImage.src=e.url,this._cardTitle.textContent=e.title,this._cardImage.alt=e.title,super.open()}}("#card-modal");B.setEventListeners();const T=new class extends s{constructor(e){super({popupSelector:e}),this._popupConfirm=this._popupElement.querySelector(".modal__form"),this._popupSubmit=this._popupElement.querySelector(".modal__button")}setEventListeners(){this._popupConfirm.addEventListener("submit",(e=>{e.preventDefault(),this._handleSubmit()})),super.setEventListeners()}setSubmitText(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";this._popupSubmit.textContent=e?t:"Yes"}setSubmitAction(e){this._handleSubmit=e}}("#delete-card-modal");function x(e){T.open(),T.setSubmitAction((()=>{T.setSubmitText(!0,"Deleting..."),k.deleteCard(e._id).then((()=>{T.close(),e.handleDeleteCard()})).catch((e=>console.error(e))).finally((()=>T.setSubmitText(!1)))}))}T.setEventListeners()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,